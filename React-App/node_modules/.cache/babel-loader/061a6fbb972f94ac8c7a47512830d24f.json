{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport { useTracked } from './globalState';\nconst updateInterval = 1000; // async function grabData() {\n//   if (port) {\n//     const response = await fetch('/request-data/', {});\n//     const json = await response.json();\n//     // if no new data, return 0\n//     if (json.length == 0) { return 0; }\n//     // else return new data\n//     else { return json; }\n//   }\n// }\n\nexport function GetData(props) {\n  const initialState = {\n    version: 0,\n    flags: 0\n  };\n  const [getDataState, setGetDataState] = useState(initialState);\n  const [state, setState] = useTracked();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      // const d = await grabData();\n      async function getd() {\n        if (state.port) {\n          const response = await fetch('/request-data/', {});\n          const json = await response.json(); // if no new data, return 0\n\n          if (json.length == 0) {\n            return 0;\n          } // else return new data\n          else {\n              return json;\n            }\n        }\n      }\n\n      var d = getd();\n\n      if (!d) {\n        return;\n      } // d looks like: [{'version': 0, 'flags': 0, 'payloadSize': 0, 'seqNum': 0, 'checksum': 66047, 'time': '19:10:20', 'data': {0: 1, 1: 17}}, ...]\n      // data of form: {'label1': [[time1, value1], [time2, value2], ...], 'label2': [...], ...}\n\n\n      var mutdata = state.data;\n      console.log(d);\n      d.forEach(el => Object.entries(el['data']).forEach(([key, val]) => {\n        key in mutdata ? mutdata[key].append([el['time'], val]) : mutdata[key] = [[el['time'], val]];\n      } // data[key][el[time]] = val\n      ));\n      setState({\n        data: mutdata\n      });\n    }, updateInterval);\n    return () => clearInterval(interval);\n  }, []);\n  return null;\n}","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/getData.js"],"names":["React","useState","useEffect","useTracked","updateInterval","GetData","props","initialState","version","flags","getDataState","setGetDataState","state","setState","interval","setInterval","getd","port","response","fetch","json","length","d","mutdata","data","console","log","forEach","el","Object","entries","key","val","append","clearInterval"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,MAAMC,cAAc,GAAG,IAAvB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAE,CADU;AAEnBC,IAAAA,KAAK,EAAE;AAFY,GAArB;AAKA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACM,YAAD,CAAhD;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBV,UAAU,EAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC;AACA,qBAAeC,IAAf,GAAsB;AACpB,YAAIJ,KAAK,CAACK,IAAV,EAAgB;AACd,gBAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAmB,EAAnB,CAA5B;AACA,gBAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB,CAFc,CAId;;AACA,cAAIA,IAAI,CAACC,MAAL,IAAe,CAAnB,EAAsB;AAAE,mBAAO,CAAP;AAAW,WAAnC,CACA;AADA,eAEK;AAAE,qBAAOD,IAAP;AAAc;AACtB;AACF;;AAED,UAAIE,CAAC,GAAGN,IAAI,EAAZ;;AAEA,UAAK,CAACM,CAAN,EAAU;AAAE;AAAS,OAhBkB,CAkBvC;AACA;;;AAEA,UAAIC,OAAO,GAAGX,KAAK,CAACY,IAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAZ;AACAA,MAAAA,CAAC,CAACK,OAAF,CAAUC,EAAE,IACVC,MAAM,CAACC,OAAP,CAAeF,EAAE,CAAC,MAAD,CAAjB,EAA2BD,OAA3B,CAAmC,CAAC,CAACI,GAAD,EAAMC,GAAN,CAAD,KACjC;AAAGD,QAAAA,GAAG,IAAIR,OAAR,GAAmBA,OAAO,CAACQ,GAAD,CAAP,CAAaE,MAAb,CAAoB,CAACL,EAAE,CAAC,MAAD,CAAH,EAAaI,GAAb,CAApB,CAAnB,GAA4DT,OAAO,CAACQ,GAAD,CAAP,GAAe,CAAC,CAACH,EAAE,CAAC,MAAD,CAAH,EAAaI,GAAb,CAAD,CAA3E;AAAiG,OADrG,CAEE;AAFF,OADF;AAOAnB,MAAAA,QAAQ,CAAC;AAACW,QAAAA,IAAI,EAAED;AAAP,OAAD,CAAR;AACD,KA/B2B,EA+BzBnB,cA/ByB,CAA5B;AAiCA,WAAO,MAAM8B,aAAa,CAACpB,QAAD,CAA1B;AACD,GAnCQ,EAmCN,EAnCM,CAAT;AAqCA,SAAO,IAAP;AACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTracked } from './globalState';\n\nconst updateInterval = 1000;\n\n// async function grabData() {\n//   if (port) {\n//     const response = await fetch('/request-data/', {});\n//     const json = await response.json();\n\n//     // if no new data, return 0\n//     if (json.length == 0) { return 0; }\n//     // else return new data\n//     else { return json; }\n//   }\n// }\n\nexport function GetData(props) {\n  const initialState = {\n    version: 0,\n    flags: 0\n  };\n\n  const [getDataState, setGetDataState] = useState(initialState);\n  const [state, setState] = useTracked();\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      // const d = await grabData();\n      async function getd() {\n        if (state.port) {\n          const response = await fetch('/request-data/', {});\n          const json = await response.json();\n      \n          // if no new data, return 0\n          if (json.length == 0) { return 0; }\n          // else return new data\n          else { return json; }\n        }\n      }\n\n      var d = getd();\n\n      if ( !d ) { return; }\n\n      // d looks like: [{'version': 0, 'flags': 0, 'payloadSize': 0, 'seqNum': 0, 'checksum': 66047, 'time': '19:10:20', 'data': {0: 1, 1: 17}}, ...]\n      // data of form: {'label1': [[time1, value1], [time2, value2], ...], 'label2': [...], ...}\n\n      var mutdata = state.data;\n      console.log(d);\n      d.forEach(el => \n        Object.entries(el['data']).forEach(([key, val]) => \n          { (key in mutdata) ? mutdata[key].append([el['time'], val]) : mutdata[key] = [[el['time'], val]]; }\n          // data[key][el[time]] = val\n          )\n        );\n\n      setState({data: mutdata});\n    }, updateInterval);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return null;\n}"]},"metadata":{},"sourceType":"module"}