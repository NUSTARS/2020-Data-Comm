{"ast":null,"code":"const {\n  promisify\n} = require('util');\n\nconst binding = require('bindings')('bindings.node');\n\nconst AbstractBinding = require('@serialport/binding-abstract');\n\nconst linuxList = require('./linux-list');\n\nconst Poller = require('./poller');\n\nconst unixRead = require('./unix-read');\n\nconst unixWrite = require('./unix-write');\n\nconst {\n  wrapWithHiddenComName\n} = require('./legacy');\n\nconst defaultBindingOptions = Object.freeze({\n  vmin: 1,\n  vtime: 0\n});\nconst asyncOpen = promisify(binding.open);\nconst asyncClose = promisify(binding.close);\nconst asyncUpdate = promisify(binding.update);\nconst asyncSet = promisify(binding.set);\nconst asyncGet = promisify(binding.get);\nconst asyncGetBaudRate = promisify(binding.getBaudRate);\nconst asyncDrain = promisify(binding.drain);\nconst asyncFlush = promisify(binding.flush);\n/**\n * The linux binding layer\n */\n\nclass LinuxBinding extends AbstractBinding {\n  static list() {\n    return wrapWithHiddenComName(linuxList());\n  }\n\n  constructor(opt = {}) {\n    super(opt);\n    this.bindingOptions = { ...defaultBindingOptions,\n      ...opt.bindingOptions\n    };\n    this.fd = null;\n    this.writeOperation = null;\n  }\n\n  get isOpen() {\n    return this.fd !== null;\n  }\n\n  async open(path, options) {\n    await super.open(path, options);\n    this.openOptions = { ...this.bindingOptions,\n      ...options\n    };\n    const fd = await asyncOpen(path, this.openOptions);\n    this.fd = fd;\n    this.poller = new Poller(fd);\n  }\n\n  async close() {\n    await super.close();\n    const fd = this.fd;\n    this.poller.stop();\n    this.poller.destroy();\n    this.poller = null;\n    this.openOptions = null;\n    this.fd = null;\n    return asyncClose(fd);\n  }\n\n  async read(buffer, offset, length) {\n    await super.read(buffer, offset, length);\n    return unixRead({\n      binding: this,\n      buffer,\n      offset,\n      length\n    });\n  }\n\n  async write(buffer) {\n    this.writeOperation = super.write(buffer).then(async () => {\n      if (buffer.length === 0) {\n        return;\n      }\n\n      await unixWrite({\n        binding: this,\n        buffer\n      });\n      this.writeOperation = null;\n    });\n    return this.writeOperation;\n  }\n\n  async update(options) {\n    await super.update(options);\n    return asyncUpdate(this.fd, options);\n  }\n\n  async set(options) {\n    await super.set(options);\n    return asyncSet(this.fd, options);\n  }\n\n  async get() {\n    await super.get();\n    return asyncGet(this.fd);\n  }\n\n  async getBaudRate() {\n    await super.get();\n    return asyncGetBaudRate(this.fd);\n  }\n\n  async drain() {\n    await super.drain();\n    await this.writeOperation;\n    return asyncDrain(this.fd);\n  }\n\n  async flush() {\n    await super.flush();\n    return asyncFlush(this.fd);\n  }\n\n}\n\nmodule.exports = LinuxBinding;","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/node_modules/@serialport/bindings/lib/linux.js"],"names":["promisify","require","binding","AbstractBinding","linuxList","Poller","unixRead","unixWrite","wrapWithHiddenComName","defaultBindingOptions","Object","freeze","vmin","vtime","asyncOpen","open","asyncClose","close","asyncUpdate","update","asyncSet","set","asyncGet","get","asyncGetBaudRate","getBaudRate","asyncDrain","drain","asyncFlush","flush","LinuxBinding","list","constructor","opt","bindingOptions","fd","writeOperation","isOpen","path","options","openOptions","poller","stop","destroy","read","buffer","offset","length","write","then","module","exports"],"mappings":"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","sourcesContent":["const { promisify } = require('util')\nconst binding = require('bindings')('bindings.node')\nconst AbstractBinding = require('@serialport/binding-abstract')\nconst linuxList = require('./linux-list')\nconst Poller = require('./poller')\nconst unixRead = require('./unix-read')\nconst unixWrite = require('./unix-write')\nconst { wrapWithHiddenComName } = require('./legacy')\n\nconst defaultBindingOptions = Object.freeze({\n  vmin: 1,\n  vtime: 0,\n})\n\nconst asyncOpen = promisify(binding.open)\nconst asyncClose = promisify(binding.close)\nconst asyncUpdate = promisify(binding.update)\nconst asyncSet = promisify(binding.set)\nconst asyncGet = promisify(binding.get)\nconst asyncGetBaudRate = promisify(binding.getBaudRate)\nconst asyncDrain = promisify(binding.drain)\nconst asyncFlush = promisify(binding.flush)\n\n/**\n * The linux binding layer\n */\nclass LinuxBinding extends AbstractBinding {\n  static list() {\n    return wrapWithHiddenComName(linuxList())\n  }\n\n  constructor(opt = {}) {\n    super(opt)\n    this.bindingOptions = { ...defaultBindingOptions, ...opt.bindingOptions }\n    this.fd = null\n    this.writeOperation = null\n  }\n\n  get isOpen() {\n    return this.fd !== null\n  }\n\n  async open(path, options) {\n    await super.open(path, options)\n    this.openOptions = { ...this.bindingOptions, ...options }\n    const fd = await asyncOpen(path, this.openOptions)\n    this.fd = fd\n    this.poller = new Poller(fd)\n  }\n\n  async close() {\n    await super.close()\n    const fd = this.fd\n    this.poller.stop()\n    this.poller.destroy()\n    this.poller = null\n    this.openOptions = null\n    this.fd = null\n    return asyncClose(fd)\n  }\n\n  async read(buffer, offset, length) {\n    await super.read(buffer, offset, length)\n    return unixRead({ binding: this, buffer, offset, length })\n  }\n\n  async write(buffer) {\n    this.writeOperation = super.write(buffer).then(async () => {\n      if (buffer.length === 0) {\n        return\n      }\n      await unixWrite({ binding: this, buffer })\n      this.writeOperation = null\n    })\n    return this.writeOperation\n  }\n\n  async update(options) {\n    await super.update(options)\n    return asyncUpdate(this.fd, options)\n  }\n\n  async set(options) {\n    await super.set(options)\n    return asyncSet(this.fd, options)\n  }\n\n  async get() {\n    await super.get()\n    return asyncGet(this.fd)\n  }\n\n  async getBaudRate() {\n    await super.get()\n    return asyncGetBaudRate(this.fd)\n  }\n\n  async drain() {\n    await super.drain()\n    await this.writeOperation\n    return asyncDrain(this.fd)\n  }\n\n  async flush() {\n    await super.flush()\n    return asyncFlush(this.fd)\n  }\n}\n\nmodule.exports = LinuxBinding\n"]},"metadata":{},"sourceType":"script"}