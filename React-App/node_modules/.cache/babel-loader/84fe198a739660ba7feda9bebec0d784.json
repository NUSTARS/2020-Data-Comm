{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/graph.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport * as zoom from 'chartjs-plugin-zoom'; // import NameForm from \"./ticks\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400,\n    overflow: \"hidden\"\n  }\n});\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: typeData,\n          backgroundColor: \"rgba(0, 0, 0, 1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: props.ticks\n            }\n          }]\n        },\n        plugins: {\n          zoom: {\n            pan: {\n              enabled: false,\n              mode: 'x'\n            },\n            zoom: {\n              enabled: true,\n              mode: 'x'\n            }\n          }\n        }\n      }\n    };\n    this.ref = {\n      lineChart: React.createRef()\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    const newDat = this.state.meta.dat;\n    const newNum = Math.round(Math.random() * 100);\n    newDat.push(newNum);\n    const newLab = [...Array(newDat.length).keys()];\n    const newMeta = {\n      ticks: this.props.ticks,\n      lab: newLab,\n      dat: newDat\n    };\n    this.setState({\n      meta: newMeta\n    });\n    const oldDataSet = this.state.lineChartData.datasets[0];\n    let newDataSet = { ...oldDataSet\n    };\n    newDataSet.data.push(newNum);\n    const possLabs = this.state.meta.lab;\n    const newChartData = { ...this.state.lineChartData,\n      datasets: [newDataSet],\n      labels: possLabs\n    };\n    this.setState({\n      lineChartData: newChartData\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes[\"chart-container\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.ref.lineChart.chartInstance.resetZoom();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Reset Zoom\"), /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(Graph);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/graph.js"],"names":["React","withStyles","Chart","zoom","styles","theme","height","overflow","updateInterval","typeData","Graph","Component","constructor","props","state","meta","ticks","lab","dat","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","autoSkip","maxTicksLimit","plugins","pan","mode","ref","lineChart","createRef","updateChart","bind","componentDidMount","setInterval","newDat","newNum","Math","round","random","push","newLab","Array","length","keys","newMeta","setState","oldDataSet","newDataSet","possLabs","newChartData","render","classes","chartInstance","resetZoom","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport * as zoom from 'chartjs-plugin-zoom';\n// import NameForm from \"./ticks\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400,\n    overflow: \"hidden\"\n  }\n});\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"line\",\n            label: typeData,\n            backgroundColor: \"rgba(0, 0, 0, 1)\",\n            borderColor: this.props.theme.palette.primary.main,\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\n            pointBorderColor: this.props.theme.palette.secondary.main,\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            data: []\n          }\n        ]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: props.ticks\n              }\n            }\n          ]\n        },\n        plugins: {\n          zoom: {\n              pan: {\n                  enabled: false,\n                  mode: 'x'\n              },\n              zoom: {\n                  enabled: true,\n                  mode: 'x',\n              }\n          }\n      }\n      }\n    };\n    this.ref = {\n      lineChart:React.createRef()\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval( this.updateChart,\n    updateInterval)\n  }\n\n  updateChart() {\n      const newDat = this.state.meta.dat;\n      const newNum = Math.round(Math.random()*100);\n\n      newDat.push(newNum);\n      const newLab = [...Array(newDat.length).keys()];\n\n      const newMeta = {ticks: this.props.ticks, lab: newLab, dat: newDat}\n      this.setState({meta: newMeta})\n\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      let newDataSet = { ...oldDataSet };\n      newDataSet.data.push(newNum);\n\n      const possLabs = this.state.meta.lab;\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newDataSet],\n        labels: possLabs\n\n      };\n      this.setState({ lineChartData: newChartData });\n    }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Button onClick={()=>{\n            this.ref.lineChart.chartInstance.resetZoom()\n            }}>\n        Reset Zoom\n        </Button>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(Graph);"]},"metadata":{},"sourceType":"module"}