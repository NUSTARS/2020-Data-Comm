{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/graph.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport * as zoom from 'chartjs-plugin-zoom';\nimport { useTracked } from './globalState';\nexport function Graph(props) {\n  const initialState = {\n    selected: typeof props.selected === 'undefined' ? [] : props.selected,\n    lineChartData: {\n      // labels: [],\n      datasets: []\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [{\n          ticks: {\n            autoSkip: true,\n            suggestedMax: 100\n          }\n        }]\n      },\n      plugins: {\n        zoom: {\n          pan: {\n            enabled: true,\n            mode: 'x',\n            speed: 100\n          },\n          zoom: {\n            enabled: true,\n            mode: 'x',\n            speed: 500,\n            sensitivity: 0.5\n          }\n        }\n      }\n    }\n  };\n  const [graphState, setGraphState] = useState(initialState);\n  const [state, setState] = useTracked();\n  useEffect(() => {\n    var datasets = [];\n    var yAxes = [];\n\n    if (typeof graphState.selected !== 'undefined') {\n      graphState.selected.forEach(label => {\n        datasets.push({\n          type: 'line',\n          label: label,\n          labels: state.data[label].map(x => x[0]),\n          //Object.keys(state.data[label]),\n          data: state.data[label].map(x => x[1]),\n          //Object.values(state.data[label]),\n          backgroundColor: \"rgba(0, 0, 0, 1)\",\n          borderColor: \"rgba(78, 42, 132, 1)\",\n          pointBackgroundColor: \"rgba(78, 42, 132, 1)\",\n          pointBorderColor: \"rgba(78, 42, 132, 1)\",\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          yAxisID: label\n        });\n        yAxes.push({\n          id: label,\n          position: 'left'\n        });\n      });\n    }\n\n    const newChartData = { ...graphState.lineChartData,\n      datasets: datasets\n    };\n    const newChartOptions = { ...graphState.lineChartOptions,\n      scales: { ...graphState.lineChartOptions.scales,\n        yAxes: yAxes\n      }\n    };\n    setGraphState({\n      lineChartData: newChartData,\n      lineChartOptions: newChartOptions\n    });\n  }, [graphState.selected, state.data, graphState.lineChartData, graphState.lineChartOptions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    xs: 12,\n    style: {\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    data: graphState.lineChartData,\n    options: graphState.lineChartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/graph.js"],"names":["React","useState","useEffect","withStyles","Chart","zoom","useTracked","Graph","props","initialState","selected","lineChartData","datasets","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","suggestedMax","plugins","pan","mode","speed","sensitivity","graphState","setGraphState","state","setState","yAxes","forEach","label","push","type","labels","data","map","x","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","borderWidth","lineTension","yAxisID","id","position","newChartData","newChartOptions","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport * as zoom from 'chartjs-plugin-zoom';\nimport { useTracked } from './globalState';\n\nexport function Graph(props) {\n\n  const initialState = {\n      selected: (typeof props.selected === 'undefined') ? [] : props.selected,\n      lineChartData: {\n        // labels: [],\n        datasets: []\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                suggestedMax: 100\n              }\n            }\n          ]\n        },\n        plugins: {\n          zoom: {\n              pan: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 100,\n              },\n              zoom: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 500,\n                  sensitivity: 0.5,\n              }\n          }\n        }\n      }\n    };\n\n    const [graphState, setGraphState] = useState(initialState);\n    const [state, setState] = useTracked();\n\n    useEffect(() => {\n      var datasets = []\n      var yAxes = []\n      if (typeof graphState.selected !== 'undefined') {\n        graphState.selected.forEach(label => {\n            datasets.push(\n              {\n                type: 'line',\n                label: label,\n                labels: state.data[label].map(x => x[0]), //Object.keys(state.data[label]),\n                data: state.data[label].map(x => x[1]), //Object.values(state.data[label]),\n                backgroundColor: \"rgba(0, 0, 0, 1)\",\n                borderColor: \"rgba(78, 42, 132, 1)\", \n                pointBackgroundColor: \"rgba(78, 42, 132, 1)\",\n                pointBorderColor: \"rgba(78, 42, 132, 1)\",\n                borderWidth: \"2\",\n                lineTension: 0.45,\n                yAxisID: label\n              }\n            );\n            yAxes.push(\n              {\n                id: label,\n                position: 'left'\n              }\n            );\n          }\n        );\n      }\n\n      const newChartData = {\n        ...graphState.lineChartData,\n        datasets: datasets\n      }\n\n      const newChartOptions = {\n        ...graphState.lineChartOptions,\n        scales: {...graphState.lineChartOptions.scales, yAxes: yAxes}\n      }\n\n      setGraphState({lineChartData: newChartData, lineChartOptions: newChartOptions})\n\n    }, [graphState.selected, state.data, graphState.lineChartData, graphState.lineChartOptions]);\n\n    return (\n      <div xs={12} style={{height: 400}}>\n        <Chart \n          data={graphState.lineChartData}\n          options={graphState.lineChartOptions}\n        />\n      </div>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}