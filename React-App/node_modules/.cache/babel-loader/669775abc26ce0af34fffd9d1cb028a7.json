{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/App.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nlet updateInterval = 1000;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meta: {\n        ticks: 10,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"test\",\n          backgroundColor: \"rgba(0, 0, 0, 1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart = e => {\n      const newDat = this.meta.dat;\n      const newLab = this.meta.lab;\n      newDat.push(Math.round(Math.random() * 100));\n      newLab.push(this.meta.lab.length + 1);\n      const newMeta = { ...this.state.meta,\n        lab: newLab,\n        dat: newDat\n      };\n      this.setState({\n        meta: newMeta\n      });\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      const newDataSet = { ...oldDataSet,\n        data: this.state.meta.dat.slice(this.ticks > this.lab.length ? -this.lab.length : -this.ticks)\n      }; // newDataSet.data.push(Math.round(Math.random()*100));\n      // newDataSet.data.shift();\n      // const newLab = this.meta.lab.concat(this.lab.length+1)\n      // this.setState({lab: newLab})\n\n      const newChartData = { ...this.state.lineChartData,\n        datasets: [newDataSet],\n        labels: this.meta.lab.slice(this.ticks > this.lab.length ? -this.lab.length : -this.ticks)\n      };\n      this.setState({\n        lineChartData: newChartData\n      });\n      console.log(this.state.lineChartData.labels);\n    }, updateInterval);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes[\"chart-container\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(App);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/App.js"],"names":["React","withStyles","Chart","styles","theme","height","updateInterval","App","Component","state","meta","ticks","lab","dat","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","props","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","autoSkip","maxTicksLimit","componentDidMount","setInterval","updateChart","e","newDat","newLab","push","Math","round","random","length","newMeta","setState","oldDataSet","newDataSet","slice","newChartData","console","log","render","classes","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nlet updateInterval = 1000\n\nclass App extends React.Component {\n  state = {\n    meta: {\n      ticks: 10,\n      lab: [],\n      dat: []\n    },\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          type: \"line\",\n          label: \"test\",\n          backgroundColor: \"rgba(0, 0, 0, 1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }\n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }\n        ]\n      }\n    }\n  };\n\n  componentDidMount() {\n    setInterval( this.updateChart = e => {\n      const newDat = this.meta.dat;\n      const newLab = this.meta.lab;\n      newDat.push(Math.round(Math.random()*100));\n      newLab.push(this.meta.lab.length+1);\n      const newMeta = {...this.state.meta, lab: newLab, dat: newDat}\n      this.setState({meta: newMeta})\n\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      const newDataSet = { ...oldDataSet, data: this.state.meta.dat.slice(this.ticks > this.lab.length ? -this.lab.length : -this.ticks) };\n      // newDataSet.data.push(Math.round(Math.random()*100));\n      // newDataSet.data.shift();\n      // const newLab = this.meta.lab.concat(this.lab.length+1)\n      // this.setState({lab: newLab})\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newDataSet],\n        labels: this.meta.lab.slice(this.ticks > this.lab.length ? -this.lab.length : -this.ticks)\n      };\n      this.setState({ lineChartData: newChartData });\n      console.log(this.state.lineChartData.labels)\n    },\n    updateInterval)\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);"]},"metadata":{},"sourceType":"module"}