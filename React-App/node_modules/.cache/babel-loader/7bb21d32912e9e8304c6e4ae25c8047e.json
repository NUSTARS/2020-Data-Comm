{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/App.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport Select from \"react-dropdown-select\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nlet updateInterval = 1000;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setValues = selectValues => this.setState({\n      selectValues\n    });\n\n    this.updateChart = e => {\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      const newDataSet = {\n        oldDataSet\n      };\n      newDataSet.data.push(Math.round(Math.random() * 100)); // newDataSet.data = newDataSet.data.slice(-this.state.num_values)\n      // newDataSet.data.shift();\n\n      const newChartData = { ...this.state.lineChartData,\n        datasets: { ...newDataSet,\n          data: newDataSet.data.slice(-this.state.num_values)\n        },\n        labels: this.state.lineChartData.labels.concat(this.state.lineChartData.labels.length).slice(-this.state.num_values)\n      };\n      this.setState({\n        lineChartData: newChartData\n      });\n    };\n\n    this.state = {\n      num_values: 30,\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"test\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes[\"chart-container\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      options: [10, 30, 60],\n      onChange: values => this.setValues(values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(App);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/App.js"],"names":["React","withStyles","Chart","Select","styles","theme","height","updateInterval","App","Component","constructor","props","setValues","selectValues","setState","updateChart","e","oldDataSet","state","lineChartData","datasets","newDataSet","data","push","Math","round","random","newChartData","slice","num_values","labels","concat","length","type","label","backgroundColor","borderColor","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","componentDidMount","setInterval","render","classes","values","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport Select from \"react-dropdown-select\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nlet updateInterval = 1000\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      num_values: 30,\n      lineChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"line\",\n            label: \"test\",\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            borderColor: this.props.theme.palette.primary.main,\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\n            pointBorderColor: this.props.theme.palette.secondary.main,\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            data: []\n          }\n        ]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 10\n              }\n            }\n          ]\n        }\n      }\n    };\n  }\n\n  setValues = selectValues => this.setState({ selectValues });\n\n  updateChart = e => {\n    const oldDataSet = this.state.lineChartData.datasets[0];\n    const newDataSet = { oldDataSet };\n    newDataSet.data.push(Math.round(Math.random()*100));\n    // newDataSet.data = newDataSet.data.slice(-this.state.num_values)\n    // newDataSet.data.shift();\n\n    const newChartData = {\n      ...this.state.lineChartData,\n      datasets: {...newDataSet, data: newDataSet.data.slice(-this.state.num_values)},\n      labels: this.state.lineChartData.labels.concat(\n        this.state.lineChartData.labels.length\n      ).slice(-this.state.num_values)\n    };\n    this.setState({ lineChartData: newChartData });\n  }\n\n  componentDidMount() {\n    setInterval( this.updateChart,\n    updateInterval)\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n        <Select options={[10,30,60]} onChange={(values) => this.setValues(values)} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);"]},"metadata":{},"sourceType":"module"}