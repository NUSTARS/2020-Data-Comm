{"ast":null,"code":"import { createContext, createElement, useCallback, useEffect, useRef, useState } from 'react';\nimport { batchedUpdates } from './batchedUpdates'; // -------------------------------------------------------\n// context\n// -------------------------------------------------------\n\nexport const STATE_CONTEXT_PROPERTY = 's';\nexport const VERSION_CONTEXT_PROPERTY = 'v';\nexport const UPDATE_CONTEXT_PROPERTY = 'u';\nexport const SUBSCRIBE_CONTEXT_PROPERTY = 'b';\nconst WARNING_MESSAGE = 'Please use <Provider>';\nconst warningObject = {\n  get s\n  /* [STATE_CONTEXT_PROPERTY] */\n  () {\n    throw new Error(WARNING_MESSAGE);\n  },\n\n  get u\n  /* [UPDATE_CONTEXT_PROPERTY] */\n  () {\n    throw new Error(WARNING_MESSAGE);\n  }\n\n};\n\nconst calculateChangedBits = (a, b) => a[UPDATE_CONTEXT_PROPERTY] !== b[UPDATE_CONTEXT_PROPERTY] || a[SUBSCRIBE_CONTEXT_PROPERTY] !== b[SUBSCRIBE_CONTEXT_PROPERTY] ? 1 : 0;\n\nexport const createCustomContext = (w = warningObject, c = calculateChangedBits) => createContext(w, c); // -------------------------------------------------------\n// provider\n// -------------------------------------------------------\n\nexport const createProvider = (context, useValue) => {\n  const Provider = props => {\n    const [state, update] = useValue(props);\n    const [version, setVersion] = useState(0);\n    const versionRef = useRef(0);\n    const listeners = useRef([]);\n    const updateAndNotify = useCallback((...args) => {\n      batchedUpdates(() => {\n        versionRef.current += 1;\n        listeners.current.forEach(listener => listener(versionRef.current));\n        setVersion(versionRef.current);\n        update(...args);\n      });\n    }, [update]);\n    useEffect(() => {\n      versionRef.current += 1;\n      listeners.current.forEach(listener => listener(versionRef.current, state));\n      setVersion(versionRef.current);\n    }, [state]);\n    const subscribe = useCallback(listener => {\n      listeners.current.push(listener);\n\n      const unsubscribe = () => {\n        const index = listeners.current.indexOf(listener);\n        listeners.current.splice(index, 1);\n      };\n\n      return unsubscribe;\n    }, []);\n    return createElement(context.Provider, {\n      value: {\n        [STATE_CONTEXT_PROPERTY]: state,\n        [VERSION_CONTEXT_PROPERTY]: version,\n        [UPDATE_CONTEXT_PROPERTY]: updateAndNotify,\n        [SUBSCRIBE_CONTEXT_PROPERTY]: subscribe\n      }\n    }, props.children);\n  };\n\n  return Provider;\n};","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/node_modules/react-tracked/src/createProvider.js"],"names":["createContext","createElement","useCallback","useEffect","useRef","useState","batchedUpdates","STATE_CONTEXT_PROPERTY","VERSION_CONTEXT_PROPERTY","UPDATE_CONTEXT_PROPERTY","SUBSCRIBE_CONTEXT_PROPERTY","WARNING_MESSAGE","warningObject","s","Error","u","calculateChangedBits","a","b","createCustomContext","w","c","createProvider","context","useValue","Provider","props","state","update","version","setVersion","versionRef","listeners","updateAndNotify","args","current","forEach","listener","subscribe","push","unsubscribe","index","indexOf","splice","value","children"],"mappings":"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","sourcesContent":["import {\n  createContext,\n  createElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { batchedUpdates } from './batchedUpdates';\n\n// -------------------------------------------------------\n// context\n// -------------------------------------------------------\n\nexport const STATE_CONTEXT_PROPERTY = 's';\nexport const VERSION_CONTEXT_PROPERTY = 'v';\nexport const UPDATE_CONTEXT_PROPERTY = 'u';\nexport const SUBSCRIBE_CONTEXT_PROPERTY = 'b';\n\nconst WARNING_MESSAGE = 'Please use <Provider>';\nconst warningObject = {\n  get s/* [STATE_CONTEXT_PROPERTY] */() {\n    throw new Error(WARNING_MESSAGE);\n  },\n  get u/* [UPDATE_CONTEXT_PROPERTY] */() {\n    throw new Error(WARNING_MESSAGE);\n  },\n};\n\nconst calculateChangedBits = (a, b) => (\n  (\n    a[UPDATE_CONTEXT_PROPERTY] !== b[UPDATE_CONTEXT_PROPERTY]\n    || a[SUBSCRIBE_CONTEXT_PROPERTY] !== b[SUBSCRIBE_CONTEXT_PROPERTY]\n  ) ? 1 : 0\n);\n\nexport const createCustomContext = (\n  w = warningObject,\n  c = calculateChangedBits,\n) => createContext(w, c);\n\n// -------------------------------------------------------\n// provider\n// -------------------------------------------------------\n\nexport const createProvider = (context, useValue) => {\n  const Provider = (props) => {\n    const [state, update] = useValue(props);\n    const [version, setVersion] = useState(0);\n    const versionRef = useRef(0);\n    const listeners = useRef([]);\n    const updateAndNotify = useCallback((...args) => {\n      batchedUpdates(() => {\n        versionRef.current += 1;\n        listeners.current.forEach((listener) => listener(versionRef.current));\n        setVersion(versionRef.current);\n        update(...args);\n      });\n    }, [update]);\n    useEffect(() => {\n      versionRef.current += 1;\n      listeners.current.forEach((listener) => listener(versionRef.current, state));\n      setVersion(versionRef.current);\n    }, [state]);\n    const subscribe = useCallback((listener) => {\n      listeners.current.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.current.indexOf(listener);\n        listeners.current.splice(index, 1);\n      };\n      return unsubscribe;\n    }, []);\n    return createElement(\n      context.Provider,\n      {\n        value: {\n          [STATE_CONTEXT_PROPERTY]: state,\n          [VERSION_CONTEXT_PROPERTY]: version,\n          [UPDATE_CONTEXT_PROPERTY]: updateAndNotify,\n          [SUBSCRIBE_CONTEXT_PROPERTY]: subscribe,\n        },\n      },\n      props.children,\n    );\n  };\n  return Provider;\n};\n"]},"metadata":{},"sourceType":"module"}