{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/App.js\";\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [{\n        name: \"ticker\",\n        product_ids: [\"BTC-USD\"]\n      }]\n    };\n    this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify(subscribe));\n    };\n\n    this.ws.onmessage = e => {\n      const value = JSON.parse(e.data);\n\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet\n      };\n      newBtcDataSet.data.push(value.price);\n      const newChartData = { ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(new Date().toLocaleTimeString())\n      };\n      this.setState({\n        lineChartData: newChartData\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.ws.close();\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes[\"chart-container\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(App);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/App.js"],"names":["React","render","withStyles","Chart","styles","theme","height","App","Component","state","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","props","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","componentDidMount","subscribe","channels","name","product_ids","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","push","price","newChartData","concat","Date","toLocaleTimeString","setState","componentWillUnmount","close","classes","withTheme"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }\n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }\n        ]\n      }\n    }\n  };\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"]\n        }\n      ]\n    };\n\n    this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify(subscribe));\n    };\n\n    this.ws.onmessage = e => {\n      const value = JSON.parse(e.data);\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(value.price);\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      this.setState({ lineChartData: newChartData });\n    };\n  }\n\n  componentWillUnmount() {\n    this.ws.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);"]},"metadata":{},"sourceType":"module"}