{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/graph.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chart from \"./chart\";\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport * as zoom from 'chartjs-plugin-zoom';\nimport DropDown from \"./dataDropdown\";\nimport \"./split-pane.css\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    maxHeight: 600,\n    overflow: \"hidden\"\n  }\n});\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: typeData,\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          // \"rgba(78, 42, 132, 1)\"\n          borderColor: \"rgba(78, 42, 132, 1)\",\n          //this.props.theme.palette.primary.main,\n          pointBackgroundColor: \"rgba(78, 42, 132, 1)\",\n          //this.props.theme.palette.secondary.main,\n          pointBorderColor: \"rgba(78, 42, 132, 1)\",\n          //this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              // maxTicksLimit: props.ticks,\n              suggestedMax: 100\n            }\n          }]\n        },\n        plugins: {\n          zoom: {\n            pan: {\n              enabled: true,\n              mode: 'x',\n              speed: 100\n            },\n            zoom: {\n              enabled: true,\n              mode: 'x',\n              speed: 500,\n              sensitivity: 0.5\n            }\n          }\n        }\n      }\n    };\n    this.ref = {\n      lineChart: React.createRef()\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  grabData() {\n    return fetch('/request-data/').then(res => res.json()).then(data => {\n      const d = [data.time, data.data];\n      return d;\n    }, []);\n  }\n\n  updateChart() {\n    this.grabData().then(d => {\n      const newDat = this.state.meta.dat;\n      console.log(d);\n      const newNum = d[1][10];\n      newDat.push(newNum);\n      const newLab = [...Array(newDat.length).keys()];\n      const newMeta = {\n        ticks: this.props.ticks,\n        lab: newLab,\n        dat: newDat\n      };\n      this.setState({\n        meta: newMeta\n      });\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      let newDataSet = { ...oldDataSet\n      };\n      newDataSet.data.push(newNum);\n      const possLabs = this.state.meta.lab;\n      const newChartData = { ...this.state.lineChartData,\n        datasets: [newDataSet],\n        labels: possLabs\n      };\n      this.setState({\n        lineChartData: newChartData\n      });\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      xs: 12,\n      style: {\n        height: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(Graph);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/graph.js"],"names":["React","withStyles","Grid","makeStyles","Chart","Resizable","ResizableBox","zoom","DropDown","styles","theme","maxHeight","overflow","updateInterval","typeData","Graph","Component","constructor","props","state","meta","ticks","lab","dat","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","autoSkip","suggestedMax","plugins","pan","mode","speed","sensitivity","ref","lineChart","createRef","updateChart","bind","componentDidMount","setInterval","grabData","fetch","then","res","json","d","time","newDat","console","log","newNum","push","newLab","Array","length","keys","newMeta","setState","oldDataSet","newDataSet","possLabs","newChartData","render","classes","height","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chart from \"./chart\";\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport * as zoom from 'chartjs-plugin-zoom';\nimport DropDown from \"./dataDropdown\";\nimport \"./split-pane.css\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    maxHeight: 600,\n    overflow: \"hidden\"\n  }\n});\n\n\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"line\",\n            label: typeData,\n            backgroundColor: \"rgba(0, 0, 0, 0)\", // \"rgba(78, 42, 132, 1)\"\n            borderColor: \"rgba(78, 42, 132, 1)\", //this.props.theme.palette.primary.main,\n            pointBackgroundColor: \"rgba(78, 42, 132, 1)\",//this.props.theme.palette.secondary.main,\n            pointBorderColor: \"rgba(78, 42, 132, 1)\",//this.props.theme.palette.secondary.main,\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            data: []\n          }\n        ]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                // maxTicksLimit: props.ticks,\n                suggestedMax: 100\n              }\n            }\n          ]\n        },\n        plugins: {\n          zoom: {\n              pan: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 100,\n              },\n              zoom: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 500,\n                  sensitivity: 0.5,\n              }\n          }\n      }\n      }\n    };\n    this.ref = {\n      lineChart:React.createRef()\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval( this.updateChart,\n    updateInterval)\n  }\n\n  grabData() {\n    return fetch('/request-data/')\n      .then(res => res.json())\n      .then(data => {\n          const d = [data.time, data.data];\n          return d;\n        }, [])\n  }\n\n  updateChart() {\n      this.grabData().then((d) => {\n        const newDat = this.state.meta.dat;\n        console.log(d);\n        const newNum = d[1][10];\n\n        newDat.push(newNum);\n        const newLab = [...Array(newDat.length).keys()];\n\n        const newMeta = {ticks: this.props.ticks, lab: newLab, dat: newDat}\n        this.setState({meta: newMeta})\n\n        const oldDataSet = this.state.lineChartData.datasets[0];\n        let newDataSet = { ...oldDataSet };\n        newDataSet.data.push(newNum);\n\n        const possLabs = this.state.meta.lab;\n\n        const newChartData = {\n          ...this.state.lineChartData,\n          datasets: [newDataSet],\n          labels: possLabs\n        };\n        this.setState({ lineChartData: newChartData });\n      })      \n    }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div xs={12} style={{height: 400}}>\n        {/* <Grid container spacing={3}>\n        <Grid xs={6}>\n        <Grid item xs={3}> */}\n        {/* <ResizableBox  width={400} height={200}\n        minConstraints={[100, 100]} maxConstraints={[800, 400]}> */}\n        <Chart \n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n        {/* </ResizableBox> */}\n        {/* </Grid>\n        <Grid item xs={6}>\n        <DropDown />\n        </Grid>\n        </Grid>\n        </Grid> */}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(Graph);"]},"metadata":{},"sourceType":"module"}