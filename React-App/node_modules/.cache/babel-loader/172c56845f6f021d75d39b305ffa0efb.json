{"ast":null,"code":"const DelimiterParser = require('@serialport/parser-delimiter');\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\n\n\nclass ReadLineParser extends DelimiterParser {\n  constructor(options) {\n    const opts = {\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8',\n      ...options\n    };\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n    }\n\n    super(opts);\n  }\n\n}\n\nmodule.exports = ReadLineParser;","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/node_modules/@serialport/parser-readline/lib/index.js"],"names":["DelimiterParser","require","ReadLineParser","constructor","options","opts","delimiter","Buffer","from","encoding","module","exports"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,8BAAD,CAA/B;AAEA;;;;;;;;;;;;;AAWA,MAAMC,cAAN,SAA6BF,eAA7B,CAA6C;AAC3CG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMC,IAAI,GAAG;AACXC,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CADA;AAEXC,MAAAA,QAAQ,EAAE,MAFC;AAGX,SAAGL;AAHQ,KAAb;;AAMA,QAAI,OAAOC,IAAI,CAACC,SAAZ,KAA0B,QAA9B,EAAwC;AACtCD,MAAAA,IAAI,CAACC,SAAL,GAAiBC,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACC,SAAjB,EAA4BD,IAAI,CAACI,QAAjC,CAAjB;AACD;;AAED,UAAMJ,IAAN;AACD;;AAb0C;;AAgB7CK,MAAM,CAACC,OAAP,GAAiBT,cAAjB","sourcesContent":["const DelimiterParser = require('@serialport/parser-delimiter')\n\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\nclass ReadLineParser extends DelimiterParser {\n  constructor(options) {\n    const opts = {\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8',\n      ...options,\n    }\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding)\n    }\n\n    super(opts)\n  }\n}\n\nmodule.exports = ReadLineParser\n"]},"metadata":{},"sourceType":"script"}