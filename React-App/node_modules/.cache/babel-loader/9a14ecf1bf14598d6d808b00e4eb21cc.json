{"ast":null,"code":"const binding = require('bindings')('bindings.node');\n\nconst AbstractBinding = require('@serialport/binding-abstract');\n\nconst {\n  promisify\n} = require('util');\n\nconst serialNumParser = require('./win32-sn-parser');\n\nconst asyncList = promisify(binding.list);\nconst asyncOpen = promisify(binding.open);\nconst asyncClose = promisify(binding.close);\nconst asyncRead = promisify(binding.read);\nconst asyncWrite = promisify(binding.write);\nconst asyncUpdate = promisify(binding.update);\nconst asyncSet = promisify(binding.set);\nconst asyncGet = promisify(binding.get);\nconst asyncGetBaudRate = promisify(binding.getBaudRate);\nconst asyncDrain = promisify(binding.drain);\nconst asyncFlush = promisify(binding.flush);\n\nconst {\n  wrapWithHiddenComName\n} = require('./legacy');\n/**\n * The Windows binding layer\n */\n\n\nclass WindowsBinding extends AbstractBinding {\n  static async list() {\n    const ports = await asyncList(); // Grab the serial number from the pnp id\n\n    return wrapWithHiddenComName(ports.map(port => {\n      if (port.pnpId && !port.serialNumber) {\n        const serialNumber = serialNumParser(port.pnpId);\n\n        if (serialNumber) {\n          return { ...port,\n            serialNumber\n          };\n        }\n      }\n\n      return port;\n    }));\n  }\n\n  constructor(opt = {}) {\n    super(opt);\n    this.bindingOptions = { ...opt.bindingOptions\n    };\n    this.fd = null;\n    this.writeOperation = null;\n  }\n\n  get isOpen() {\n    return this.fd !== null;\n  }\n\n  async open(path, options) {\n    await super.open(path, options);\n    this.openOptions = { ...this.bindingOptions,\n      ...options\n    };\n    const fd = await asyncOpen(path, this.openOptions);\n    this.fd = fd;\n  }\n\n  async close() {\n    await super.close();\n    const fd = this.fd;\n    this.fd = null;\n    return asyncClose(fd);\n  }\n\n  async read(buffer, offset, length) {\n    await super.read(buffer, offset, length);\n\n    try {\n      const bytesRead = await asyncRead(this.fd, buffer, offset, length);\n      return {\n        bytesRead,\n        buffer\n      };\n    } catch (err) {\n      if (!this.isOpen) {\n        err.canceled = true;\n      }\n\n      throw err;\n    }\n  }\n\n  async write(buffer) {\n    this.writeOperation = super.write(buffer).then(async () => {\n      if (buffer.length === 0) {\n        return;\n      }\n\n      await asyncWrite(this.fd, buffer);\n      this.writeOperation = null;\n    });\n    return this.writeOperation;\n  }\n\n  async update(options) {\n    await super.update(options);\n    return asyncUpdate(this.fd, options);\n  }\n\n  async set(options) {\n    await super.set(options);\n    return asyncSet(this.fd, options);\n  }\n\n  async get() {\n    await super.get();\n    return asyncGet(this.fd);\n  }\n\n  async getBaudRate() {\n    await super.get();\n    return asyncGetBaudRate(this.fd);\n  }\n\n  async drain() {\n    await super.drain();\n    await this.writeOperation;\n    return asyncDrain(this.fd);\n  }\n\n  async flush() {\n    await super.flush();\n    return asyncFlush(this.fd);\n  }\n\n}\n\nmodule.exports = WindowsBinding;","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/node_modules/@serialport/bindings/lib/win32.js"],"names":["binding","require","AbstractBinding","promisify","serialNumParser","asyncList","list","asyncOpen","open","asyncClose","close","asyncRead","read","asyncWrite","write","asyncUpdate","update","asyncSet","set","asyncGet","get","asyncGetBaudRate","getBaudRate","asyncDrain","drain","asyncFlush","flush","wrapWithHiddenComName","WindowsBinding","ports","map","port","pnpId","serialNumber","constructor","opt","bindingOptions","fd","writeOperation","isOpen","path","options","openOptions","buffer","offset","length","bytesRead","err","canceled","then","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoB,eAApB,CAAhB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,8BAAD,CAA/B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAgBF,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAMI,SAAS,GAAGF,SAAS,CAACH,OAAO,CAACM,IAAT,CAA3B;AACA,MAAMC,SAAS,GAAGJ,SAAS,CAACH,OAAO,CAACQ,IAAT,CAA3B;AACA,MAAMC,UAAU,GAAGN,SAAS,CAACH,OAAO,CAACU,KAAT,CAA5B;AACA,MAAMC,SAAS,GAAGR,SAAS,CAACH,OAAO,CAACY,IAAT,CAA3B;AACA,MAAMC,UAAU,GAAGV,SAAS,CAACH,OAAO,CAACc,KAAT,CAA5B;AACA,MAAMC,WAAW,GAAGZ,SAAS,CAACH,OAAO,CAACgB,MAAT,CAA7B;AACA,MAAMC,QAAQ,GAAGd,SAAS,CAACH,OAAO,CAACkB,GAAT,CAA1B;AACA,MAAMC,QAAQ,GAAGhB,SAAS,CAACH,OAAO,CAACoB,GAAT,CAA1B;AACA,MAAMC,gBAAgB,GAAGlB,SAAS,CAACH,OAAO,CAACsB,WAAT,CAAlC;AACA,MAAMC,UAAU,GAAGpB,SAAS,CAACH,OAAO,CAACwB,KAAT,CAA5B;AACA,MAAMC,UAAU,GAAGtB,SAAS,CAACH,OAAO,CAAC0B,KAAT,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA4B1B,OAAO,CAAC,UAAD,CAAzC;AAEA;;;;;AAGA,MAAM2B,cAAN,SAA6B1B,eAA7B,CAA6C;AAC3C,eAAaI,IAAb,GAAoB;AAClB,UAAMuB,KAAK,GAAG,MAAMxB,SAAS,EAA7B,CADkB,CAElB;;AACA,WAAOsB,qBAAqB,CAC1BE,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;AAChB,UAAIA,IAAI,CAACC,KAAL,IAAc,CAACD,IAAI,CAACE,YAAxB,EAAsC;AACpC,cAAMA,YAAY,GAAG7B,eAAe,CAAC2B,IAAI,CAACC,KAAN,CAApC;;AACA,YAAIC,YAAJ,EAAkB;AAChB,iBAAO,EACL,GAAGF,IADE;AAELE,YAAAA;AAFK,WAAP;AAID;AACF;;AACD,aAAOF,IAAP;AACD,KAXD,CAD0B,CAA5B;AAcD;;AAEDG,EAAAA,WAAW,CAACC,GAAG,GAAG,EAAP,EAAW;AACpB,UAAMA,GAAN;AACA,SAAKC,cAAL,GAAsB,EAAE,GAAGD,GAAG,CAACC;AAAT,KAAtB;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACD;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKF,EAAL,KAAY,IAAnB;AACD;;AAED,QAAM7B,IAAN,CAAWgC,IAAX,EAAiBC,OAAjB,EAA0B;AACxB,UAAM,MAAMjC,IAAN,CAAWgC,IAAX,EAAiBC,OAAjB,CAAN;AACA,SAAKC,WAAL,GAAmB,EAAE,GAAG,KAAKN,cAAV;AAA0B,SAAGK;AAA7B,KAAnB;AACA,UAAMJ,EAAE,GAAG,MAAM9B,SAAS,CAACiC,IAAD,EAAO,KAAKE,WAAZ,CAA1B;AACA,SAAKL,EAAL,GAAUA,EAAV;AACD;;AAED,QAAM3B,KAAN,GAAc;AACZ,UAAM,MAAMA,KAAN,EAAN;AACA,UAAM2B,EAAE,GAAG,KAAKA,EAAhB;AACA,SAAKA,EAAL,GAAU,IAAV;AACA,WAAO5B,UAAU,CAAC4B,EAAD,CAAjB;AACD;;AAED,QAAMzB,IAAN,CAAW+B,MAAX,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;AACjC,UAAM,MAAMjC,IAAN,CAAW+B,MAAX,EAAmBC,MAAnB,EAA2BC,MAA3B,CAAN;;AACA,QAAI;AACF,YAAMC,SAAS,GAAG,MAAMnC,SAAS,CAAC,KAAK0B,EAAN,EAAUM,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,CAAjC;AACA,aAAO;AAAEC,QAAAA,SAAF;AAAaH,QAAAA;AAAb,OAAP;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY;AACZ,UAAI,CAAC,KAAKR,MAAV,EAAkB;AAChBQ,QAAAA,GAAG,CAACC,QAAJ,GAAe,IAAf;AACD;;AACD,YAAMD,GAAN;AACD;AACF;;AAED,QAAMjC,KAAN,CAAY6B,MAAZ,EAAoB;AAClB,SAAKL,cAAL,GAAsB,MAAMxB,KAAN,CAAY6B,MAAZ,EAAoBM,IAApB,CAAyB,YAAY;AACzD,UAAIN,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,YAAMhC,UAAU,CAAC,KAAKwB,EAAN,EAAUM,MAAV,CAAhB;AACA,WAAKL,cAAL,GAAsB,IAAtB;AACD,KANqB,CAAtB;AAOA,WAAO,KAAKA,cAAZ;AACD;;AAED,QAAMtB,MAAN,CAAayB,OAAb,EAAsB;AACpB,UAAM,MAAMzB,MAAN,CAAayB,OAAb,CAAN;AACA,WAAO1B,WAAW,CAAC,KAAKsB,EAAN,EAAUI,OAAV,CAAlB;AACD;;AAED,QAAMvB,GAAN,CAAUuB,OAAV,EAAmB;AACjB,UAAM,MAAMvB,GAAN,CAAUuB,OAAV,CAAN;AACA,WAAOxB,QAAQ,CAAC,KAAKoB,EAAN,EAAUI,OAAV,CAAf;AACD;;AAED,QAAMrB,GAAN,GAAY;AACV,UAAM,MAAMA,GAAN,EAAN;AACA,WAAOD,QAAQ,CAAC,KAAKkB,EAAN,CAAf;AACD;;AAED,QAAMf,WAAN,GAAoB;AAClB,UAAM,MAAMF,GAAN,EAAN;AACA,WAAOC,gBAAgB,CAAC,KAAKgB,EAAN,CAAvB;AACD;;AAED,QAAMb,KAAN,GAAc;AACZ,UAAM,MAAMA,KAAN,EAAN;AACA,UAAM,KAAKc,cAAX;AACA,WAAOf,UAAU,CAAC,KAAKc,EAAN,CAAjB;AACD;;AAED,QAAMX,KAAN,GAAc;AACZ,UAAM,MAAMA,KAAN,EAAN;AACA,WAAOD,UAAU,CAAC,KAAKY,EAAN,CAAjB;AACD;;AAlG0C;;AAqG7Ca,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["const binding = require('bindings')('bindings.node')\nconst AbstractBinding = require('@serialport/binding-abstract')\nconst { promisify } = require('util')\nconst serialNumParser = require('./win32-sn-parser')\n\nconst asyncList = promisify(binding.list)\nconst asyncOpen = promisify(binding.open)\nconst asyncClose = promisify(binding.close)\nconst asyncRead = promisify(binding.read)\nconst asyncWrite = promisify(binding.write)\nconst asyncUpdate = promisify(binding.update)\nconst asyncSet = promisify(binding.set)\nconst asyncGet = promisify(binding.get)\nconst asyncGetBaudRate = promisify(binding.getBaudRate)\nconst asyncDrain = promisify(binding.drain)\nconst asyncFlush = promisify(binding.flush)\nconst { wrapWithHiddenComName } = require('./legacy')\n\n/**\n * The Windows binding layer\n */\nclass WindowsBinding extends AbstractBinding {\n  static async list() {\n    const ports = await asyncList()\n    // Grab the serial number from the pnp id\n    return wrapWithHiddenComName(\n      ports.map(port => {\n        if (port.pnpId && !port.serialNumber) {\n          const serialNumber = serialNumParser(port.pnpId)\n          if (serialNumber) {\n            return {\n              ...port,\n              serialNumber,\n            }\n          }\n        }\n        return port\n      })\n    )\n  }\n\n  constructor(opt = {}) {\n    super(opt)\n    this.bindingOptions = { ...opt.bindingOptions }\n    this.fd = null\n    this.writeOperation = null\n  }\n\n  get isOpen() {\n    return this.fd !== null\n  }\n\n  async open(path, options) {\n    await super.open(path, options)\n    this.openOptions = { ...this.bindingOptions, ...options }\n    const fd = await asyncOpen(path, this.openOptions)\n    this.fd = fd\n  }\n\n  async close() {\n    await super.close()\n    const fd = this.fd\n    this.fd = null\n    return asyncClose(fd)\n  }\n\n  async read(buffer, offset, length) {\n    await super.read(buffer, offset, length)\n    try {\n      const bytesRead = await asyncRead(this.fd, buffer, offset, length)\n      return { bytesRead, buffer }\n    } catch (err) {\n      if (!this.isOpen) {\n        err.canceled = true\n      }\n      throw err\n    }\n  }\n\n  async write(buffer) {\n    this.writeOperation = super.write(buffer).then(async () => {\n      if (buffer.length === 0) {\n        return\n      }\n      await asyncWrite(this.fd, buffer)\n      this.writeOperation = null\n    })\n    return this.writeOperation\n  }\n\n  async update(options) {\n    await super.update(options)\n    return asyncUpdate(this.fd, options)\n  }\n\n  async set(options) {\n    await super.set(options)\n    return asyncSet(this.fd, options)\n  }\n\n  async get() {\n    await super.get()\n    return asyncGet(this.fd)\n  }\n\n  async getBaudRate() {\n    await super.get()\n    return asyncGetBaudRate(this.fd)\n  }\n\n  async drain() {\n    await super.drain()\n    await this.writeOperation\n    return asyncDrain(this.fd)\n  }\n\n  async flush() {\n    await super.flush()\n    return asyncFlush(this.fd)\n  }\n}\n\nmodule.exports = WindowsBinding\n"]},"metadata":{},"sourceType":"script"}