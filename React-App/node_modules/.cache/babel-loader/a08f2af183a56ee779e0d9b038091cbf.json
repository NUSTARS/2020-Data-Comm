{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/graph.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\"; // import NameForm from \"./ticks\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400,\n    width: 900\n  }\n});\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: typeData,\n          backgroundColor: \"rgba(0, 0, 0, 1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: props.ticks\n            }\n          }]\n        }\n      }\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    const newDat = this.state.meta.dat;\n    const newLab = this.state.meta.lab;\n    const newNum = Math.round(Math.random() * 100);\n    newDat.push(newNum);\n    newLab.push(this.state.meta.lab.length + 1);\n    const newMeta = {\n      ticks: this.props.ticks,\n      lab: newLab,\n      dat: newDat\n    };\n    this.setState({\n      meta: newMeta\n    });\n    const oldDataSet = this.state.lineChartData.datasets[0];\n    const newDataSet = { ...oldDataSet\n    };\n    newDataSet.data.push(newNum);\n\n    if (newDataSet.data.length > this.state.meta.ticks) {\n      newDataSet.data.shift();\n    }\n\n    const newChartData = { ...this.state.lineChartData,\n      datasets: [newDataSet],\n      labels: this.state.meta.lab.slice(this.state.meta.ticks > this.state.meta.lab.length ? -this.state.meta.lab.length : -this.state.meta.ticks)\n    };\n    this.setState({\n      lineChartData: newChartData\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes[\"chart-container\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(Graph);","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/graph.js"],"names":["React","withStyles","Chart","styles","theme","height","width","updateInterval","typeData","Graph","Component","constructor","props","state","meta","ticks","lab","dat","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","autoSkip","maxTicksLimit","updateChart","bind","componentDidMount","setInterval","newDat","newLab","newNum","Math","round","random","push","length","newMeta","setState","oldDataSet","newDataSet","shift","newChartData","slice","render","classes","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n// import NameForm from \"./ticks\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400,\n    width: 900\n  }\n});\n\nlet updateInterval = 1000;\nlet typeData = \"Live\";\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {\n        ticks: props.ticks,\n        lab: [],\n        dat: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"line\",\n            label: typeData,\n            backgroundColor: \"rgba(0, 0, 0, 1)\",\n            borderColor: this.props.theme.palette.primary.main,\n            pointBackgroundColor: this.props.theme.palette.secondary.main,\n            pointBorderColor: this.props.theme.palette.secondary.main,\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            data: []\n          }\n        ]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: props.ticks\n              }\n            }\n          ]\n        }\n      }\n    };\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval( this.updateChart,\n    updateInterval)\n  }\n\n  updateChart() {\n      const newDat = this.state.meta.dat;\n      const newLab = this.state.meta.lab;\n\n      const newNum = Math.round(Math.random()*100);\n\n      newDat.push(newNum);\n      newLab.push(this.state.meta.lab.length+1);\n\n      const newMeta = {ticks: this.props.ticks, lab: newLab, dat: newDat}\n      this.setState({meta: newMeta})\n\n      const oldDataSet = this.state.lineChartData.datasets[0];\n      const newDataSet = { ...oldDataSet };\n      newDataSet.data.push(newNum);\n      if (newDataSet.data.length > this.state.meta.ticks) {\n        newDataSet.data.shift();\n      }\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newDataSet],\n        labels: this.state.meta.lab.slice(this.state.meta.ticks > this.state.meta.lab.length ? -this.state.meta.lab.length : -this.state.meta.ticks)\n      };\n      this.setState({ lineChartData: newChartData });\n    }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(Graph);"]},"metadata":{},"sourceType":"module"}