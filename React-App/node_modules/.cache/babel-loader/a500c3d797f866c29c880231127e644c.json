{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/globalState.js\";\nimport React, { createContext } from \"react\";\nconst dataInitState = {\n  data: {},\n  setData: undefined\n};\nconst portInitState = {\n  port: '',\n  setPort: undefined\n};\nconst DataStateContext = createContext(dataInitState);\nconst PortStateContext = createContext(portInitState);\nconst [data, setData] = React.useState(dataInitState.data);\nconst [port, setPort] = React.useState(portInitState.port);\nconst dataContextValue = React.useMemo(() => ({\n  data,\n  setData\n}), [data]);\nconst portContextValue = React.useMemo(() => ({\n  port,\n  setPort\n}), [port]);\n/**\n * Global State provider & hooks\n */\n\nconst GlobalStateProvider = ({\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(DataStateContext.Provider, {\n    value: dataContextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PortStateContext.Provider, {\n    value: portContextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nconst useDataState = () => React.useContext(DataStateContext);\n\nconst usePortState = () => React.useContext(PortStateContext);\n\nexport function useDS() {\n  const {\n    data,\n    setData\n  } = useDataState();\n  return {\n    data,\n    setData\n  };\n}\nexport function usePS() {\n  const {\n    port,\n    setPort\n  } = usePortState();\n  return {\n    port,\n    setPort\n  };\n}\nexport default GlobalStateProvider;","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/globalState.js"],"names":["React","createContext","dataInitState","data","setData","undefined","portInitState","port","setPort","DataStateContext","PortStateContext","useState","dataContextValue","useMemo","portContextValue","GlobalStateProvider","children","useDataState","useContext","usePortState","useDS","usePS"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,MAAMC,aAAa,GAAG;AAACC,EAAAA,IAAI,EAAE,EAAP;AAAWC,EAAAA,OAAO,EAAEC;AAApB,CAAtB;AACA,MAAMC,aAAa,GAAG;AAACC,EAAAA,IAAI,EAAE,EAAP;AAAWC,EAAAA,OAAO,EAAEH;AAApB,CAAtB;AAEA,MAAMI,gBAAgB,GAAGR,aAAa,CAACC,aAAD,CAAtC;AACA,MAAMQ,gBAAgB,GAAGT,aAAa,CAACK,aAAD,CAAtC;AAEA,MAAM,CAACH,IAAD,EAAOC,OAAP,IAAkBJ,KAAK,CAACW,QAAN,CAAeT,aAAa,CAACC,IAA7B,CAAxB;AACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACW,QAAN,CAAeL,aAAa,CAACC,IAA7B,CAAxB;AACA,MAAMK,gBAAgB,GAAGZ,KAAK,CAACa,OAAN,CAAc,OAAO;AAACV,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAP,CAAd,EAAuC,CAACD,IAAD,CAAvC,CAAzB;AACA,MAAMW,gBAAgB,GAAGd,KAAK,CAACa,OAAN,CAAc,OAAO;AAACN,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAP,CAAd,EAAuC,CAACD,IAAD,CAAvC,CAAzB;AAEA;;;;AAGA,MAAMQ,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAG5C,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEJ,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEE,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,QADL,CADF,CADF;AAOD,CAVD;;AAYA,MAAMC,YAAY,GAAG,MAAMjB,KAAK,CAACkB,UAAN,CAAiBT,gBAAjB,CAA3B;;AACA,MAAMU,YAAY,GAAG,MAAMnB,KAAK,CAACkB,UAAN,CAAiBR,gBAAjB,CAA3B;;AAEA,OAAO,SAASU,KAAT,GAAiB;AACtB,QAAM;AAACjB,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBa,YAAY,EAApC;AACA,SAAO;AAACd,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAP;AAED;AAED,OAAO,SAASiB,KAAT,GAAiB;AACtB,QAAM;AAACd,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBW,YAAY,EAApC;AACA,SAAO;AAACZ,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAP;AACD;AAED,eAAeO,mBAAf","sourcesContent":["import React, { createContext } from \"react\";\n\nconst dataInitState = {data: {}, setData: undefined};\nconst portInitState = {port: '', setPort: undefined};\n\nconst DataStateContext = createContext(dataInitState);\nconst PortStateContext = createContext(portInitState);\n\nconst [data, setData] = React.useState(dataInitState.data);\nconst [port, setPort] = React.useState(portInitState.port);\nconst dataContextValue = React.useMemo(() => ({data, setData}), [data]);\nconst portContextValue = React.useMemo(() => ({port, setPort}), [port]);\n\n/**\n * Global State provider & hooks\n */\nconst GlobalStateProvider = ({ children }) => {\n  \n\n  return (\n    <DataStateContext.Provider value={dataContextValue}>\n      <PortStateContext.Provider value={portContextValue}>\n          {children}\n      </PortStateContext.Provider>\n    </DataStateContext.Provider>\n  );\n};\n\nconst useDataState = () => React.useContext(DataStateContext);\nconst usePortState = () => React.useContext(PortStateContext);\n\nexport function useDS() {\n  const {data, setData} = useDataState();\n  return {data, setData};\n\n}\n\nexport function usePS() {\n  const {port, setPort} = usePortState();\n  return {port, setPort};\n}\n\nexport default GlobalStateProvider;"]},"metadata":{},"sourceType":"module"}