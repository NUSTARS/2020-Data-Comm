{"ast":null,"code":"import { useContext, useMemo, useRef, useReducer } from 'react';\nimport { useIsomorphicLayoutEffect, useAffectedDebugValue } from './utils';\nimport { STATE_CONTEXT_PROPERTY, VERSION_CONTEXT_PROPERTY, SUBSCRIBE_CONTEXT_PROPERTY } from './createProvider';\nimport { createDeepProxy, isDeepChanged, MODE_ASSUME_UNCHANGED_IF_UNAFFECTED, MODE_IGNORE_REF_EQUALITY, MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP } from './deepProxy';\nimport { createUseUpdate } from './createUseUpdate';\nconst MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED = 0;\nconst MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED = MODE_ASSUME_UNCHANGED_IF_UNAFFECTED | MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP;\nconst MODE_MUTABLE_ROOT_STATE = MODE_IGNORE_REF_EQUALITY; // only for root\n\nconst MODE_DEFAULT = MODE_ASSUME_UNCHANGED_IF_UNAFFECTED; // only for root\n\nconst STATE_PROPERTY = 's';\nconst AFFECTED_PROPERTY = 'a';\nconst CACHE_PROPERTY = 'c';\nconst DEEP_PROXY_MODE_PROPERTY = 'd';\nexport const createUseTrackedState = context => {\n  const useTrackedState = (opts = {}) => {\n    const {\n      [STATE_CONTEXT_PROPERTY]: state,\n      [VERSION_CONTEXT_PROPERTY]: version,\n      [SUBSCRIBE_CONTEXT_PROPERTY]: subscribe\n    } = useContext(context);\n    const affected = new WeakMap();\n    const lastTracked = useRef();\n    useIsomorphicLayoutEffect(() => {\n      lastTracked.current = {\n        [STATE_PROPERTY]: state,\n        [AFFECTED_PROPERTY]: affected,\n        [CACHE_PROPERTY]: new WeakMap(),\n\n        /* eslint-disable no-nested-ternary, indent */\n        [DEEP_PROXY_MODE_PROPERTY]: opts.unstable_forceUpdateForStateChange ? MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED : opts.unstable_ignoreIntermediateObjectUsage ? MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED : opts.unstable_ignoreStateEquality ? MODE_MUTABLE_ROOT_STATE :\n        /* default */\n        MODE_DEFAULT\n        /* eslint-enable no-nested-ternary, indent */\n\n      };\n    });\n    const [, checkUpdate] = useReducer((c, v) => {\n      if (version < v) {\n        return c + 1; // schedule update\n      }\n\n      try {\n        const lastTrackedCurrent = lastTracked.current;\n\n        if (lastTrackedCurrent[STATE_PROPERTY] === state || !isDeepChanged(lastTrackedCurrent[STATE_PROPERTY], state, lastTrackedCurrent[AFFECTED_PROPERTY], lastTrackedCurrent[CACHE_PROPERTY], lastTrackedCurrent[DEEP_PROXY_MODE_PROPERTY])) {\n          // not changed\n          return c; // bail out\n        }\n      } catch (e) {// ignored (thrown promise or some other reason)\n      }\n\n      return c + 1;\n    }, 0);\n    useIsomorphicLayoutEffect(() => {\n      const callback = (nextVersion, nextState) => {\n        try {\n          const lastTrackedCurrent = lastTracked.current;\n\n          if (nextState && (lastTrackedCurrent[STATE_PROPERTY] === nextState || !isDeepChanged(lastTrackedCurrent[STATE_PROPERTY], nextState, lastTrackedCurrent[AFFECTED_PROPERTY], lastTrackedCurrent[CACHE_PROPERTY], lastTrackedCurrent[DEEP_PROXY_MODE_PROPERTY]))) {\n            // not changed\n            return;\n          }\n        } catch (e) {// ignored (thrown promise or some other reason)\n        }\n\n        checkUpdate(nextVersion);\n      };\n\n      const unsubscribe = subscribe(callback);\n      return unsubscribe;\n    }, [subscribe]);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useAffectedDebugValue(state, affected);\n    }\n\n    const proxyCache = useRef(new WeakMap()); // per-hook proxyCache\n\n    return createDeepProxy(state, affected, proxyCache.current);\n  };\n\n  return useTrackedState;\n};\nexport const createUseTracked = context => {\n  const useTrackedState = createUseTrackedState(context);\n  const useUpdate = createUseUpdate(context);\n\n  const useTracked = opts => {\n    const state = useTrackedState(opts);\n    const update = useUpdate();\n    return useMemo(() => [state, update], [state, update]);\n  };\n\n  return useTracked;\n};","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/node_modules/react-tracked/src/createUseTrackedState.js"],"names":["useContext","useMemo","useRef","useReducer","useIsomorphicLayoutEffect","useAffectedDebugValue","STATE_CONTEXT_PROPERTY","VERSION_CONTEXT_PROPERTY","SUBSCRIBE_CONTEXT_PROPERTY","createDeepProxy","isDeepChanged","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_IGNORE_REF_EQUALITY","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP","createUseUpdate","MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED","MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_MUTABLE_ROOT_STATE","MODE_DEFAULT","STATE_PROPERTY","AFFECTED_PROPERTY","CACHE_PROPERTY","DEEP_PROXY_MODE_PROPERTY","createUseTrackedState","context","useTrackedState","opts","state","version","subscribe","affected","WeakMap","lastTracked","current","unstable_forceUpdateForStateChange","unstable_ignoreIntermediateObjectUsage","unstable_ignoreStateEquality","checkUpdate","c","v","lastTrackedCurrent","e","callback","nextVersion","nextState","unsubscribe","process","env","NODE_ENV","proxyCache","createUseTracked","useUpdate","useTracked","update"],"mappings":"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","sourcesContent":["import {\n  useContext,\n  useMemo,\n  useRef,\n  useReducer,\n} from 'react';\n\nimport { useIsomorphicLayoutEffect, useAffectedDebugValue } from './utils';\nimport {\n  STATE_CONTEXT_PROPERTY,\n  VERSION_CONTEXT_PROPERTY,\n  SUBSCRIBE_CONTEXT_PROPERTY,\n} from './createProvider';\nimport {\n  createDeepProxy,\n  isDeepChanged,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED,\n  MODE_IGNORE_REF_EQUALITY,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP,\n} from './deepProxy';\nimport { createUseUpdate } from './createUseUpdate';\n\nconst MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED = 0;\nconst MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED = (\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED | MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP\n);\nconst MODE_MUTABLE_ROOT_STATE = MODE_IGNORE_REF_EQUALITY; // only for root\nconst MODE_DEFAULT = MODE_ASSUME_UNCHANGED_IF_UNAFFECTED; // only for root\n\nconst STATE_PROPERTY = 's';\nconst AFFECTED_PROPERTY = 'a';\nconst CACHE_PROPERTY = 'c';\nconst DEEP_PROXY_MODE_PROPERTY = 'd';\n\nexport const createUseTrackedState = (context) => {\n  const useTrackedState = (opts = {}) => {\n    const {\n      [STATE_CONTEXT_PROPERTY]: state,\n      [VERSION_CONTEXT_PROPERTY]: version,\n      [SUBSCRIBE_CONTEXT_PROPERTY]: subscribe,\n    } = useContext(context);\n    const affected = new WeakMap();\n    const lastTracked = useRef();\n    useIsomorphicLayoutEffect(() => {\n      lastTracked.current = {\n        [STATE_PROPERTY]: state,\n        [AFFECTED_PROPERTY]: affected,\n        [CACHE_PROPERTY]: new WeakMap(),\n        /* eslint-disable no-nested-ternary, indent */\n        [DEEP_PROXY_MODE_PROPERTY]:\n        opts.unstable_forceUpdateForStateChange ? MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED\n        : opts.unstable_ignoreIntermediateObjectUsage ? MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED\n        : opts.unstable_ignoreStateEquality ? MODE_MUTABLE_ROOT_STATE\n        : /* default */ MODE_DEFAULT,\n        /* eslint-enable no-nested-ternary, indent */\n      };\n    });\n    const [, checkUpdate] = useReducer((c, v) => {\n      if (version < v) {\n        return c + 1; // schedule update\n      }\n      try {\n        const lastTrackedCurrent = lastTracked.current;\n        if (lastTrackedCurrent[STATE_PROPERTY] === state\n          || !isDeepChanged(\n            lastTrackedCurrent[STATE_PROPERTY],\n            state,\n            lastTrackedCurrent[AFFECTED_PROPERTY],\n            lastTrackedCurrent[CACHE_PROPERTY],\n            lastTrackedCurrent[DEEP_PROXY_MODE_PROPERTY],\n          )) {\n          // not changed\n          return c; // bail out\n        }\n      } catch (e) {\n        // ignored (thrown promise or some other reason)\n      }\n      return c + 1;\n    }, 0);\n    useIsomorphicLayoutEffect(() => {\n      const callback = (nextVersion, nextState) => {\n        try {\n          const lastTrackedCurrent = lastTracked.current;\n          if (nextState && (lastTrackedCurrent[STATE_PROPERTY] === nextState\n            || !isDeepChanged(\n              lastTrackedCurrent[STATE_PROPERTY],\n              nextState,\n              lastTrackedCurrent[AFFECTED_PROPERTY],\n              lastTrackedCurrent[CACHE_PROPERTY],\n              lastTrackedCurrent[DEEP_PROXY_MODE_PROPERTY],\n            ))) {\n            // not changed\n            return;\n          }\n        } catch (e) {\n          // ignored (thrown promise or some other reason)\n        }\n        checkUpdate(nextVersion);\n      };\n      const unsubscribe = subscribe(callback);\n      return unsubscribe;\n    }, [subscribe]);\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useAffectedDebugValue(state, affected);\n    }\n    const proxyCache = useRef(new WeakMap()); // per-hook proxyCache\n    return createDeepProxy(state, affected, proxyCache.current);\n  };\n  return useTrackedState;\n};\n\nexport const createUseTracked = (context) => {\n  const useTrackedState = createUseTrackedState(context);\n  const useUpdate = createUseUpdate(context);\n  const useTracked = (opts) => {\n    const state = useTrackedState(opts);\n    const update = useUpdate();\n    return useMemo(() => [state, update], [state, update]);\n  };\n  return useTracked;\n};\n"]},"metadata":{},"sourceType":"module"}