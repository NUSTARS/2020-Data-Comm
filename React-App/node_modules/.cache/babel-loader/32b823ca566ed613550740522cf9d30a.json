{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/graph.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chart from \"./chart\";\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport * as zoom from 'chartjs-plugin-zoom';\nimport { useDS } from './globalState'; // const {data, setData} = useDataState();\n\nconst styles = theme => ({\n  \"chart-container\": {\n    maxHeight: 600,\n    overflow: \"hidden\"\n  }\n});\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: typeof props.selected === 'undefined' ? [] : props.selected,\n      lineChartData: {\n        // labels: [],\n        datasets: []\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              suggestedMax: 100\n            }\n          }]\n        },\n        plugins: {\n          zoom: {\n            pan: {\n              enabled: true,\n              mode: 'x',\n              speed: 100\n            },\n            zoom: {\n              enabled: true,\n              mode: 'x',\n              speed: 500,\n              sensitivity: 0.5\n            }\n          }\n        }\n      }\n    };\n  }\n\n  updateState() {\n    const {\n      data,\n      setData\n    } = useDS();\n    var datasets = [];\n    var yAxes = [];\n    this.state.selected.forEach(label => {\n      datasets.push({\n        type: 'line',\n        label: label,\n        labels: Object.keys(data[label]),\n        data: Object.values(data[label]),\n        backgroundColor: \"rgba(0, 0, 0, 1)\",\n        borderColor: \"rgba(78, 42, 132, 1)\",\n        //this.props.theme.palette.primary.main,\n        pointBackgroundColor: \"rgba(78, 42, 132, 1)\",\n        //this.props.theme.palette.secondary.main,\n        pointBorderColor: \"rgba(78, 42, 132, 1)\",\n        //this.props.theme.palette.secondary.main,\n        borderWidth: \"2\",\n        lineTension: 0.45,\n        yAxisID: label\n      });\n      yAxes.push({\n        id: label,\n        position: 'left'\n      });\n      const newChartData = { ...this.state.lineChartData,\n        datasets: datasets\n      };\n      const newChartOptions = { ...this.state.lineChartOptions,\n        scales: { ...this.state.lineChartOptions.scales,\n          yAxes: yAxes\n        }\n      };\n      this.setState({\n        lineChartData: newChartData,\n        lineChartOptions: newChartOptions\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  componentDidUpdate() {\n    this.updateState();\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      xs: 12,\n      style: {\n        height: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: this.state.lineChartData,\n      options: this.state.lineChartOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(Graph); // export default Graph;","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/graph.js"],"names":["React","withStyles","Grid","makeStyles","Chart","Resizable","ResizableBox","zoom","useDS","styles","theme","maxHeight","overflow","Graph","Component","constructor","props","state","selected","lineChartData","datasets","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","suggestedMax","plugins","pan","mode","speed","sensitivity","updateState","data","setData","yAxes","forEach","label","push","type","labels","Object","keys","values","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","borderWidth","lineTension","yAxisID","id","position","newChartData","newChartOptions","setState","componentDidMount","componentDidUpdate","render","classes","height","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chart from \"./chart\";\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport * as zoom from 'chartjs-plugin-zoom';\nimport { useDS } from './globalState';\n\n// const {data, setData} = useDataState();\n\nconst styles = theme => ({\n  \"chart-container\": {\n    maxHeight: 600,\n    overflow: \"hidden\"\n  }\n});\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: (typeof props.selected === 'undefined') ? [] : props.selected,\n      lineChartData: {\n        // labels: [],\n        datasets: []\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                autoSkip: true,\n                suggestedMax: 100\n              }\n            }\n          ]\n        },\n        plugins: {\n          zoom: {\n              pan: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 100,\n              },\n              zoom: {\n                  enabled: true,\n                  mode: 'x',\n                  speed: 500,\n                  sensitivity: 0.5,\n              }\n          }\n      }\n      }\n    };\n  }\n\n  updateState() {\n    const {data, setData} = useDS()\n    var datasets = []\n    var yAxes = []\n    this.state.selected.forEach(label => {\n        datasets.push(\n          {\n            type: 'line',\n            label: label,\n            labels: Object.keys(data[label]),\n            data: Object.values(data[label]),\n            backgroundColor: \"rgba(0, 0, 0, 1)\",\n            borderColor: \"rgba(78, 42, 132, 1)\", //this.props.theme.palette.primary.main,\n            pointBackgroundColor: \"rgba(78, 42, 132, 1)\",//this.props.theme.palette.secondary.main,\n            pointBorderColor: \"rgba(78, 42, 132, 1)\",//this.props.theme.palette.secondary.main,\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            yAxisID: label\n          }\n        );\n        yAxes.push(\n          {\n            id: label,\n            position: 'left'\n          }\n        );\n\n        const newChartData = {\n          ...this.state.lineChartData,\n          datasets: datasets\n        }\n\n        const newChartOptions = {\n          ...this.state.lineChartOptions,\n          scales: {...this.state.lineChartOptions.scales, yAxes: yAxes}\n        }\n\n        this.setState({lineChartData: newChartData, lineChartOptions: newChartOptions})\n      }\n    )\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  componentDidUpdate() {\n    this.updateState();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div xs={12} style={{height: 400}}>\n        <Chart \n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(Graph);\n// export default Graph;"]},"metadata":{},"sourceType":"module"}