{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Desktop/data-comm-ui/src/ticks.js\";\nimport React from \"react\"; // class Toggle extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {isToggleOn: true};\n//       // This binding is necessary to make `this` work in the callback\n//       this.handleClick = this.handleClick.bind(this);\n//     }\n//     handleClick() {\n//       this.setState(state => ({\n//         isToggleOn: !state.isToggleOn\n//       }));\n//     }\n//     render() {\n//       return (\n//         <button onClick={this.handleClick}>\n//           {this.state.isToggleOn ? 'ON' : 'OFF'}\n//         </button>\n//       );\n//     }\n//   }\n// export default Toggle;\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n  &:disabled {\n    color: grey;\n    opacity: 0.7;\n    cursor: default;\n  }\n`;\nconst ButtonToggle = styled(Button)`\n  opacity: 0.6;\n  ${({\n  active\n}) => active && `\n    opacity: 1;\n  `}\n`;\nconst ButtonGroup = styled.div`\n  display: flex;\n`;\nconst types = ['Cash', 'Credit Card', 'Bitcoin'];\n\nfunction ToggleGroup() {\n  const [active, setActive] = useState(types[0]);\n  return /*#__PURE__*/React.createElement(ButtonGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, types.map(type => /*#__PURE__*/React.createElement(ButtonToggle, {\n    key: type,\n    active: active === type,\n    onClick: () => setActive(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, type)));\n}","map":{"version":3,"sources":["/Users/Nathan/Desktop/data-comm-ui/src/ticks.js"],"names":["React","Button","styled","button","ButtonToggle","active","ButtonGroup","div","types","ToggleGroup","setActive","useState","map","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAO;;;;;;;;;;;;;CAA7B;AAeA,MAAMC,YAAY,GAAGF,MAAM,CAACD,MAAD,CAAS;;IAEhC,CAAC;AAAEI,EAAAA;AAAF,CAAD,KACAA,MAAM,IACL;;GAED;CANJ;AAQA,MAAMC,WAAW,GAAGJ,MAAM,CAACK,GAAI;;CAA/B;AAGA,MAAMC,KAAK,GAAG,CAAC,MAAD,EAAS,aAAT,EAAwB,SAAxB,CAAd;;AACA,SAASC,WAAT,GAAuB;AACrB,QAAM,CAACJ,MAAD,EAASK,SAAT,IAAsBC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAApC;AACA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACI,GAAN,CAAUC,IAAI,iBACb,oBAAC,YAAD;AACE,IAAA,GAAG,EAAEA,IADP;AAEE,IAAA,MAAM,EAAER,MAAM,KAAKQ,IAFrB;AAGE,IAAA,OAAO,EAAE,MAAMH,SAAS,CAACG,IAAD,CAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,IALH,CADD,CADH,CADF;AAaD","sourcesContent":["import React from \"react\";\n\n// class Toggle extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {isToggleOn: true};\n  \n//       // This binding is necessary to make `this` work in the callback\n//       this.handleClick = this.handleClick.bind(this);\n//     }\n  \n//     handleClick() {\n//       this.setState(state => ({\n//         isToggleOn: !state.isToggleOn\n//       }));\n//     }\n  \n//     render() {\n//       return (\n//         <button onClick={this.handleClick}>\n//           {this.state.isToggleOn ? 'ON' : 'OFF'}\n//         </button>\n//       );\n//     }\n//   }\n\n// export default Toggle;\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n  &:disabled {\n    color: grey;\n    opacity: 0.7;\n    cursor: default;\n  }\n`;\n\nconst ButtonToggle = styled(Button)`\n  opacity: 0.6;\n  ${({ active }) =>\n    active &&\n    `\n    opacity: 1;\n  `}\n`;\nconst ButtonGroup = styled.div`\n  display: flex;\n`;\nconst types = ['Cash', 'Credit Card', 'Bitcoin'];\nfunction ToggleGroup() {\n  const [active, setActive] = useState(types[0]);\n  return (\n    <ButtonGroup>\n      {types.map(type => (\n        <ButtonToggle\n          key={type}\n          active={active === type}\n          onClick={() => setActive(type)}\n        >\n          {type}\n        </ButtonToggle>\n      ))}\n    </ButtonGroup>\n  );\n}"]},"metadata":{},"sourceType":"module"}